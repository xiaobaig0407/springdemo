<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan
            base-package="com.spring.jdbctemplate.book_xml"></context:component-scan>

    <!--    引入属性文件-->
    <context:property-placeholder location="jdb.properties"/>

    <!--    创建数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--    通过数据源配置JdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--    事务针对于链接对象connection,connection由数据源创造出来-->
    <!--    配置事务管理器：依赖于数据源(即德路伊链接池)产生的链接对象 -->
    <!--    管理property：一个数据源（数据库链接池）产生的链接对象-->
    <!--    配置事务管理器,不管使用注解方式或者xml方式配置事务，事务操作一定要有DataSourceTransactionManager事务管理器支持-->

<!--    事务管理器相当于一个切面-->
    <bean id="DataSourceTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>





    <!--    配置事务通知-->
    <tx:advice id="tx" transaction-manager="DataSourceTransactionManager">
        <tx:attributes>
            <!--            在设置好的切入表达式再次进行事务设置-->
            <tx:method name="buyBook"/>
            <tx:method name="checkOut"/>
            <!--            只有select开头的方法才会被事务处理-->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="insert*"/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>

<!--            代表所有的方法-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--    配置切入点表达式-->
<!--    切入点表达式应该和通知进行关联，通知才知道作用到哪个连接点-->
<!--    pointcut-ref把切入点表达式和通知联系起来-->
    <aop:config>
        <aop:pointcut id="pointcut"
                      expression="execution(* com.spring.jdbctemplate.book_xml.service.*.*(..))"/>
<!--        引用一个事务通知，兄弟之间要有关联，需要有切入点表达式，所以有pointcut-ref引用-->
        <aop:advisor advice-ref="tx" pointcut-ref="pointCut"/>
    </aop:config>

</beans>